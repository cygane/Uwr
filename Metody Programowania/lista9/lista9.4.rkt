#lang racket

  (define morse-codes
  '((#\A . "._")   (#\B . "_...") (#\C . "_._.") (#\D . "_..")
    (#\E . ".")    (#\F . ".._.") (#\G . "__.")  (#\H . "....")
    (#\I . "..")   (#\J . ".___") (#\K . "_._")  (#\L . "._..")
    (#\M . "__")   (#\N . "_.")   (#\O . "___")  (#\P . ".__.")
    (#\Q . "__._") (#\R . "._.")  (#\S . "...")  (#\T . "_")
    (#\U . ".._")  (#\V . "..._") (#\W . ".__")  (#\X . "_.._")
    (#\Y . "_.__") (#\Z . "__..")
    (#\a . "._")   (#\b . "_...") (#\c . "_._.") (#\d . "_..")
    (#\e . ".")    (#\f . ".._.") (#\g . "__.")  (#\h . "....")
    (#\i . "..")   (#\j . ".___") (#\k . "_._")  (#\l . "._..")
    (#\m . "__")   (#\n . "_.")   (#\o . "___")  (#\p . ".__.")
    (#\q . "__._") (#\r . "._.")  (#\s . "...")  (#\t . "_")
    (#\u . "..-")  (#\v . "..._") (#\w . ".__")  (#\x . "_.._")
    (#\y . "_.__") (#\z . "__..")
    (#\0 . "_____") (#\1 . ".____") (#\2 . "..___") (#\3 . "...__")
    (#\4 . "...._") (#\5 . ".....") (#\6 . "_....") (#\7 . "__...")
    (#\8 . "___..") (#\9 . "____.")
    (#\, . "__..__") (#\; . "_._._.") (#\? . "..__..")
    (#\: . "___...") (#\' . ".____.") (#\- . "_...._") 
    (#\/ . "_.._.")  (#\space . "")  (#\. . "._._._")
    (#\+ . "._._.") (#\@ . ".__._.")
    (#\= . "_..._")))

(define (space text)
  (define charlist (string->list text))
    (define (less txt res ile)
      (if (empty? txt)
          (reverse res)
      (if (and (equal? #\space (car txt)) (= ile 2))
          (less (cdr txt) res ile)
          (if (equal? #\space (car txt))
              (less (cdr txt) (cons (car txt) res) (+ 1 ile))
              (less (cdr txt) (cons (car txt) res) ile)))))
  (less charlist empty 0))

(define (morse-code text)
  (define charlist (space text)) 
   (define (change txt res diki)
     (if (empty? txt)
         (string-join (reverse res))
     (if (equal? (car (car diki)) (car txt))
         (change (cdr txt) (cons (cdr (car diki)) res) morse-codes)
         (change txt res (cdr diki)))))
  (change charlist empty morse-codes))

(define (morse-decode txt)
  (define text (string-split txt " "))
    (define (change str res diki)
      (if (empty? str)
          (list->string (reverse res))
          (if (equal? (cdr (car diki)) (car str))
              (change (cdr str) (cons (car (car diki)) res) morse-codes)
              (change str res (cdr diki)))))
  (change text empty morse-codes))
         
  